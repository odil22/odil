#!/bin/sh -eu

: ${force=0}
: ${ext=}
: ${case=0}
: ${gpus=0}
: ${pevery=1000}
: ${solver=odil}
: ${outdir=out_heat}
: ${N=64}
: ${extra=}

export NOWARN=1
export USEGPU=1
export CUDA_VISIBLE_DEVICES=$gpus

run () {
  out="$outdir/train.csv"
  if ! [ "$force" = "1" ] && [ -f "$out" ] ; then
    echo "skip existing '$out'"
    exit 1
  fi
  cmd="./heat.py --outdir '$outdir' --Nt $N --Nx $N $@"
  echo "$cmd"
  eval "$cmd"
}

ext=
ext="$ext --plot_every 100 --report_every 10 --history_every 1 --frames 10"
ext="$ext --solver $solver --every_factor 10"
ext="$ext --plotext png --plot_title 1"

refdir="ref_heat"
refpath="$refdir/ref.pickle"
if [ -f "$refpath" ] ; then
  ext="$ext --ref_path $refpath"
else
  echo "Reference solution '$refpath' not found."
fi
ext="$ext $extra $@"

case $case in
  0)
  echo "Forward problem, compute reference solution"
  if ! [ "$force" = "1" ] && [ -f "$refpath" ] ; then
    echo "skip existing '$refpath'"
    exit 0
  fi
  ext="$ext --optimizer newton --every_factor 1 --report_every 1 --plot_every 10 --checkpoint_every 100"
  N=256 run $ext
  mkdir -p "$refdir"
  cp -v $outdir/{train.*,args.json} "$refdir/"
  cp -v "$outdir/state_000100.pickle" "$refpath"
  ;;
  1)
  echo "Forward problem with L-BFGS"
  run $ext
  ;;
  2)
  echo "Inverse problem with L-BFGS"
  ext="$ext --infer_k 1 --imposed random"
  run $ext
  ;;
  2n)
  echo "Inverse problem with Newton"
  ext="$ext --infer_k 1 --imposed random"
  ext="$ext --optimizer newton"
  ext="$ext --every_factor 1 --report_every 1 --plot_every 5"
  ext="$ext --kw 0.8"
  run $ext
  ;;
  3)
  echo "Inverse problem with PINN"
  ext="$ext --infer_k 1 --imposed random"
  ext="$ext --solver pinn --arch 32 32 32 32 --Nci 4096 --Ncb 128"
  run $ext
  ;;
esac

